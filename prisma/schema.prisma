generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id             String    @id @default(uuid()) @db.Char(36)
  type           TypeUser  @default(user)
  email          String    @db.VarChar(40)
  password       String    @db.VarChar(85)
  reset_password String?   @db.VarChar(36)
  first_name     String?   @db.VarChar(55)
  last_name      String?   @db.VarChar(30)
  phone          String?   @db.VarChar(20)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt()
  deleted_at     DateTime?

  @@map("users")
}

model Category {
  id             String     @id @default(uuid()) @db.VarChar(36)
  category_id    String?    @db.VarChar(36)
  name           String     @db.VarChar(255)
  keywords       String?    @db.VarChar(255)
  description    String?    @db.Text
  position       Int        @default(0)
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt()
  deleted_at     DateTime?
  category       Category?  @relation("categoryTocategory", fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "FK_cc7f32b7ab33c70b9e715afae84")
  other_category Category[] @relation("categoryTocategory")

  @@index([category_id], map: "FK_cc7f32b7ab33c70b9e715afae84")
  @@map("categories")
}

// model Customers {
//   id         String     @id @default(uuid()) @db.VarChar(36)
//   name       String     @db.VarChar(105)
//   email      String     @db.VarChar(85)
//   password   String     @db.VarChar(86)
//   cpf        String?    @db.VarChar(20)
//   cnpj       String?    @db.VarChar(22)
//   phone      String?    @db.VarChar(20)
//   avatar     String?    @db.VarChar(41)
//   created_at DateTime   @default(now())
//   updated_at DateTime   @updatedAt()
//   deleted_at DateTime?
//   birth_date String?    @db.VarChar(20)
//   adresses   Adresses[]
//   orders     Orders[]

//   @@map("customers")
// }

// model Adresses {
//   id           String  @id @default(uuid()) @db.VarChar(36)
//   customers_id String  @db.VarChar(36)
//   recipient    String  @db.VarChar(55)
//   address      String  @db.VarChar(65)
//   number       String  @db.VarChar(5)
//   district     String  @db.VarChar(45)
//   complement   String? @db.VarChar(85)
//   reference    String? @db.VarChar(85)
//   city         String  @db.VarChar(45)
//   state        String  @db.VarChar(2)
//   zip_code     String  @db.VarChar(9)
//   for_orders   Boolean @default(true)

//   created_at DateTime  @default(now())
//   updated_at DateTime  @updatedAt()
//   deleted_at DateTime?

//   customer Customers @relation(fields: [customers_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "FK_CUSTOMERS")

//   @@index([customers_id], map: "FK_CUSTOMERS")
//   @@map("adresses")
// }

model Products {
  id               String         @id @default(uuid()) @db.VarChar(36)
  name             String         @db.VarChar(105)
  keywords         String         @db.VarChar(255)
  visible          Boolean        @default(false)
  description      String         @db.VarChar(505)
  description_text String?        @db.Text
  created_at       DateTime?      @default(now())
  updated_at       DateTime?      @updatedAt()
  deleted_at       DateTime?
  skus             ProductsSkus[]

  @@map("products")
}

model ProductsSkus {
  id         String           @id @default(uuid()) @db.VarChar(36)
  product_id String           @db.VarChar(36)
  sku        String           @db.VarChar(20)
  codebar    String           @db.VarChar(32)
  quantity   Int              @default(0)
  price      Decimal          @default(0) @db.Decimal(10, 2)
  cost_price Decimal          @default(0) @db.Decimal(10, 2)
  sale_price Decimal          @default(0) @db.Decimal(10, 2)
  created_at DateTime?        @default(now())
  updated_at DateTime?        @updatedAt()
  deleted_at DateTime?
  product    Products?        @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "FK_PRODUCTS_SKUS")
  images     ProductsImages[]
  // orders     OrdersProducts[]

  @@index([product_id], map: "FK_PRODUCTS_SKUS")
  @@map("products_skus")
}

model ProductsImages {
  id             String        @id @default(uuid()) @db.VarChar(36)
  product_sku_id String?       @db.VarChar(36)
  image          String        @db.VarChar(48)
  position       Int           @default(0)
  created_at     DateTime?     @default(now())
  updated_at     DateTime?     @updatedAt()
  deleted_at     DateTime?
  skus           ProductsSkus? @relation(fields: [product_sku_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "FK_PRODUCTS_IMAGES")

  @@index([product_sku_id], map: "FK_PRODUCTS_IMAGES")
  @@map("products_images")
}

// model Orders {
//   id            String    @id @default(uuid()) @db.VarChar(36)
//   code          String    @db.VarChar(20)
//   date_of_order DateTime
//   customers_id  String    @db.VarChar(36)
//   created_at    DateTime  @default(now())
//   updated_at    DateTime  @updatedAt()
//   deleted_at    DateTime?

//   transactions OrdersTransactions[]
//   addresses    OrdersAddresses[]
//   products     OrdersProducts[]
//   status       OrdersStatus[]
//   customer     Customers            @relation(fields: [customers_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "FK_CUSTOMER")

//   @@index([customers_id], map: "FK_CUSTOMER")
//   @@index([code, date_of_order])
//   @@map("orders")
// }

// model OrdersAddresses {
//   id String @id @default(uuid()) @db.VarChar(36)

//   orders_id  String  @db.VarChar(36)
//   recipient  String  @db.VarChar(55)
//   address    String  @db.VarChar(65)
//   number     String  @db.VarChar(5)
//   district   String  @db.VarChar(45)
//   complement String? @db.VarChar(85)
//   reference  String? @db.VarChar(85)
//   city       String  @db.VarChar(45)
//   state      String  @db.VarChar(2)
//   zip_code   String  @db.VarChar(9)

//   order Orders @relation(fields: [orders_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "FK_ORDER_ADDRESS")

//   @@index([orders_id], map: "FK_ORDER_ADDRESS")
//   @@map("orders_addresses")
// }

// model OrdersProducts {
//   id                String  @id @default(uuid()) @db.VarChar(36)
//   orders_id         String  @db.VarChar(36)
//   produtcts_skus_id String  @db.VarChar(36)
//   quantity          Int     @default(0) @db.Int()
//   price_paid        Decimal @default(0) @db.Decimal(10, 0)

//   order Orders       @relation(fields: [orders_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "FK_ORDER_PRODUCTS")
//   sku   ProductsSkus @relation(fields: [produtcts_skus_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "FK_SKU_PRODUCTS")

//   @@index([orders_id], map: "FK_ORDER_PRODUCTS")
//   @@index([produtcts_skus_id], map: "FK_SKU_PRODUCTS")
//   @@map("orders_products")
// }

// model OrdersTransactions {
//   id              String                            @id @default(uuid()) @db.VarChar(36)
//   orders_id       String                            @db.VarChar(36)
//   payment_methods String                            @db.VarChar(55)
//   flag            String                            @db.VarChar(20)
//   installment     Int                               @default(0) @db.TinyInt
//   discounts       Decimal                           @default(0) @db.Decimal(10, 0)
//   discount_type   OrdersTransactionsDiscountType @default(percent)
//   total_price     Decimal                           @default(0) @db.Decimal(10, 0)
//   price_increase  Decimal                           @default(0) @db.Decimal(10, 0)
//   created_at      DateTime                          @default(now())
//   updated_at      DateTime                          @updatedAt()
//   deleted_at      DateTime?
//   order           Orders                            @relation(fields: [orders_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "FK_ORDER_TRANSATIONS")

//   @@index([orders_id], map: "FK_ORDER_TRANSATIONS")
//   @@map("orders_transactions")
// }

// model OrdersStatus {
//   id         String             @id @default(uuid()) @db.VarChar(36)
//   orders_id  String             @db.VarChar(36)
//   status     OrdersStatusType @default(ORDER_MADE)
//   created_at DateTime           @default(now())
//   order      Orders?            @relation(fields: [orders_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "FK_ORDER_STATUS")

//   @@index([orders_id], map: "FK_ORDER_STATUS")
//   @@map("orders_status")
// }

model Stores {
  id            String    @id @default(uuid()) @db.VarChar(36)
  title         String    @db.VarChar(105)
  fantasy_name  String    @db.VarChar(105)
  email         String    @db.VarChar(55)
  phone         String    @db.VarChar(20)
  opening_hours String    @db.VarChar(155)
  address       String    @db.VarChar(55)
  number        String    @db.VarChar(4)
  district      String    @db.VarChar(35)
  complement    String    @db.VarChar(45)
  city          String    @db.VarChar(35)
  state         String    @db.VarChar(2)
  zip_code      String    @db.VarChar(9)
  visible       Boolean   @default(true)
  created_at    DateTime? @default(now())
  updated_at    DateTime? @updatedAt()
  deleted_at    DateTime?

  @@map("stores")
}

enum OrdersTransactionsDiscountType {
  price
  percent
}

enum OrdersStatusType {
  ORDER_MADE // pedido realizado
  AWAITING_PAYMENT // aguardando pagamento
  PAYMENT_UNDER_REVIEW // pagamento em análise
  PAYMENT_ACCEPT // pagamento aprovado
  PAYMENT_NOT_APPROVED // pagamento não aprovado
  PAYMENT_NOT_MADE // pagamento não efetuado
  ORDER_IN_PRODUCTION // pedido em produção
  ORDER_IN_STOCK_PICKING // pedido em separação de estoque
  ORDER_IN_TRANSPORT // pedido em transporte
  AWAITING_WITHDRAWAL // aguardando retirada
  ORDER_DELIVERED // pedido entregue
  ORDER_CANCELED // pedido cancelado
}

enum TypeUser {
  admin
  user
  root
}
